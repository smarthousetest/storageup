// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'utilites/controllers/load/models.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 5442721645711944753),
      name: 'DownloadFileInfo',
      lastPropertyId: const IdUid(9, 2645665791868331397),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7131650269936570179),
            name: 'dbID',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5523320755081966860),
            name: 'localPath',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7198582829531229872),
            name: 'id',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2356738217894868107),
            name: 'loadPercent',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7298926203551637047),
            name: 'isInProgress',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 9155369585739726996),
            name: 'endedWithException',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1077904676258907595),
            name: 'needToShowPopup',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2018510428952180314),
            name: 'copiedToAppFolder',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 2645665791868331397),
            name: 'isFinished',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 4047182906896864951),
      name: 'OBQueue',
      lastPropertyId: const IdUid(1, 7442590144213771731),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7442590144213771731),
            name: 'id',
            type: 6,
            flags: 1)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 8830529718487384322),
      name: 'UploadFileInfo',
      lastPropertyId: const IdUid(12, 227331051525847338),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 639894055484879931),
            name: 'dbID',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3152695684487916570),
            name: 'localPath',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4034258858572258316),
            name: 'id',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3583229592037109033),
            name: 'localStorageId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4491956886229127746),
            name: 'loadPercent',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3697320795623611777),
            name: 'isInProgress',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6441769838209169860),
            name: 'folderId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2728166587279381200),
            name: 'auto',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7837833013688866893),
            name: 'endedWithException',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 3161242994337272973),
            name: 'copiedToAppFolder',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 2442321924732918033),
            name: 'needToShowPopup',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 227331051525847338),
            name: 'isFinished',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 8830529718487384322),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    DownloadFileInfo: EntityDefinition<DownloadFileInfo>(
        model: _entities[0],
        toOneRelations: (DownloadFileInfo object) => [],
        toManyRelations: (DownloadFileInfo object) => {},
        getId: (DownloadFileInfo object) => object.dbID,
        setId: (DownloadFileInfo object, int id) {
          object.dbID = id;
        },
        objectToFB: (DownloadFileInfo object, fb.Builder fbb) {
          final localPathOffset = fbb.writeString(object.localPath);
          final idOffset = fbb.writeString(object.id);
          fbb.startTable(10);
          fbb.addInt64(0, object.dbID);
          fbb.addOffset(1, localPathOffset);
          fbb.addOffset(2, idOffset);
          fbb.addInt64(3, object.loadPercent);
          fbb.addBool(4, object.isInProgress);
          fbb.addBool(5, object.endedWithException);
          fbb.addBool(6, object.needToShowPopup);
          fbb.addBool(7, object.copiedToAppFolder);
          fbb.addBool(8, object.isFinished);
          fbb.finish(fbb.endTable());
          return object.dbID;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DownloadFileInfo(
              dbID: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              id: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              localPath: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              loadPercent:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
              isInProgress: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 12, false),
              endedWithException: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 14, false),
              needToShowPopup: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 16, false),
              isFinished: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 20, false))
            ..copiedToAppFolder =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false);

          return object;
        }),
    OBQueue: EntityDefinition<OBQueue>(
        model: _entities[1],
        toOneRelations: (OBQueue object) => [],
        toManyRelations: (OBQueue object) => {},
        getId: (OBQueue object) => object.id,
        setId: (OBQueue object, int id) {
          object.id = id;
        },
        objectToFB: (OBQueue object, fb.Builder fbb) {
          fbb.startTable(2);
          fbb.addInt64(0, object.id);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = OBQueue(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));

          return object;
        }),
    UploadFileInfo: EntityDefinition<UploadFileInfo>(
        model: _entities[2],
        toOneRelations: (UploadFileInfo object) => [],
        toManyRelations: (UploadFileInfo object) => {},
        getId: (UploadFileInfo object) => object.dbID,
        setId: (UploadFileInfo object, int id) {
          object.dbID = id;
        },
        objectToFB: (UploadFileInfo object, fb.Builder fbb) {
          final localPathOffset = fbb.writeString(object.localPath);
          final idOffset = fbb.writeString(object.id);
          final localStorageIdOffset = object.localStorageId == null
              ? null
              : fbb.writeString(object.localStorageId!);
          final folderIdOffset = object.folderId == null
              ? null
              : fbb.writeString(object.folderId!);
          fbb.startTable(13);
          fbb.addInt64(0, object.dbID);
          fbb.addOffset(1, localPathOffset);
          fbb.addOffset(2, idOffset);
          fbb.addOffset(3, localStorageIdOffset);
          fbb.addInt64(4, object.loadPercent);
          fbb.addBool(5, object.isInProgress);
          fbb.addOffset(6, folderIdOffset);
          fbb.addBool(7, object.auto);
          fbb.addBool(8, object.endedWithException);
          fbb.addBool(9, object.copiedToAppFolder);
          fbb.addBool(10, object.needToShowPopup);
          fbb.addBool(11, object.isFinished);
          fbb.finish(fbb.endTable());
          return object.dbID;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = UploadFileInfo(
              dbID: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              id: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              localPath: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              loadPercent:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
              isInProgress: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 14, false),
              folderId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              auto: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 18, false),
              endedWithException: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 20, false),
              copiedToAppFolder: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 22, false),
              needToShowPopup: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 24, false),
              isFinished: const fb.BoolReader().vTableGet(buffer, rootOffset, 26, false),
              localStorageId: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 10));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [DownloadFileInfo] entity fields to define ObjectBox queries.
class DownloadFileInfo_ {
  /// see [DownloadFileInfo.dbID]
  static final dbID =
      QueryIntegerProperty<DownloadFileInfo>(_entities[0].properties[0]);

  /// see [DownloadFileInfo.localPath]
  static final localPath =
      QueryStringProperty<DownloadFileInfo>(_entities[0].properties[1]);

  /// see [DownloadFileInfo.id]
  static final id =
      QueryStringProperty<DownloadFileInfo>(_entities[0].properties[2]);

  /// see [DownloadFileInfo.loadPercent]
  static final loadPercent =
      QueryIntegerProperty<DownloadFileInfo>(_entities[0].properties[3]);

  /// see [DownloadFileInfo.isInProgress]
  static final isInProgress =
      QueryBooleanProperty<DownloadFileInfo>(_entities[0].properties[4]);

  /// see [DownloadFileInfo.endedWithException]
  static final endedWithException =
      QueryBooleanProperty<DownloadFileInfo>(_entities[0].properties[5]);

  /// see [DownloadFileInfo.needToShowPopup]
  static final needToShowPopup =
      QueryBooleanProperty<DownloadFileInfo>(_entities[0].properties[6]);

  /// see [DownloadFileInfo.copiedToAppFolder]
  static final copiedToAppFolder =
      QueryBooleanProperty<DownloadFileInfo>(_entities[0].properties[7]);

  /// see [DownloadFileInfo.isFinished]
  static final isFinished =
      QueryBooleanProperty<DownloadFileInfo>(_entities[0].properties[8]);
}

/// [OBQueue] entity fields to define ObjectBox queries.
class OBQueue_ {
  /// see [OBQueue.id]
  static final id = QueryIntegerProperty<OBQueue>(_entities[1].properties[0]);
}

/// [UploadFileInfo] entity fields to define ObjectBox queries.
class UploadFileInfo_ {
  /// see [UploadFileInfo.dbID]
  static final dbID =
      QueryIntegerProperty<UploadFileInfo>(_entities[2].properties[0]);

  /// see [UploadFileInfo.localPath]
  static final localPath =
      QueryStringProperty<UploadFileInfo>(_entities[2].properties[1]);

  /// see [UploadFileInfo.id]
  static final id =
      QueryStringProperty<UploadFileInfo>(_entities[2].properties[2]);

  /// see [UploadFileInfo.localStorageId]
  static final localStorageId =
      QueryStringProperty<UploadFileInfo>(_entities[2].properties[3]);

  /// see [UploadFileInfo.loadPercent]
  static final loadPercent =
      QueryIntegerProperty<UploadFileInfo>(_entities[2].properties[4]);

  /// see [UploadFileInfo.isInProgress]
  static final isInProgress =
      QueryBooleanProperty<UploadFileInfo>(_entities[2].properties[5]);

  /// see [UploadFileInfo.folderId]
  static final folderId =
      QueryStringProperty<UploadFileInfo>(_entities[2].properties[6]);

  /// see [UploadFileInfo.auto]
  static final auto =
      QueryBooleanProperty<UploadFileInfo>(_entities[2].properties[7]);

  /// see [UploadFileInfo.endedWithException]
  static final endedWithException =
      QueryBooleanProperty<UploadFileInfo>(_entities[2].properties[8]);

  /// see [UploadFileInfo.copiedToAppFolder]
  static final copiedToAppFolder =
      QueryBooleanProperty<UploadFileInfo>(_entities[2].properties[9]);

  /// see [UploadFileInfo.needToShowPopup]
  static final needToShowPopup =
      QueryBooleanProperty<UploadFileInfo>(_entities[2].properties[10]);

  /// see [UploadFileInfo.isFinished]
  static final isFinished =
      QueryBooleanProperty<UploadFileInfo>(_entities[2].properties[11]);
}
